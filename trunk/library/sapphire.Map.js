// Generated by CoffeeScript 1.4.0
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(function() {
  var Map;
  return window.Map = Map = (function() {

    function Map(mappings) {
      var key, value;
      if (mappings == null) {
        mappings = {};
      }
      for (key in mappings) {
        if (!__hasProp.call(mappings, key)) continue;
        value = mappings[key];
        this.add(key, value);
      }
    }

    Map.prototype.add = function(key, value) {
      var _results;
      switch (arguments.length) {
        case 2:
          return this[key] = value;
        default:
          _results = [];
          for (key in key) {
            if (!__hasProp.call(key, key)) continue;
            value = key[key];
            _results.push(this.add(key, value));
          }
          return _results;
      }
    };

    Map.prototype.remove = function(key) {
      return this[key] = void 0;
    };

    Map.prototype.get = function(key) {
      return this[key];
    };

    Map.prototype.each = function(fn) {
      var key, value, _results;
      _results = [];
      for (key in this) {
        if (!__hasProp.call(this, key)) continue;
        value = this[key];
        _results.push(fn(key, value));
      }
      return _results;
    };

    Map.prototype.ensure = function(x) {
      return x;
    };

    Map.To = function(cons) {
      return (function(_super) {

        __extends(_Class, _super);

        function _Class() {
          return _Class.__super__.constructor.apply(this, arguments);
        }

        _Class.prototype.add = function(key, value) {
          return _Class.__super__.add.call(this, key, this.ensure(value));
        };

        _Class.prototype.ensure = function(value) {
          if (value instanceof cons) {
            return value;
          } else {
            return new cons(value);
          }
        };

        return _Class;

      })(this);
    };

    Map.Using = function(combine) {
      return (function(_super) {

        __extends(_Class, _super);

        function _Class() {
          return _Class.__super__.constructor.apply(this, arguments);
        }

        _Class.prototype.add = function(key, value) {
          return _Class.__super__.add.call(this, key, !this[key] ? this.ensure(value) : combine(this.ensure(value), this.ensure(this[key])));
        };

        return _Class;

      })(this);
    };

    return Map;

  })();
});
