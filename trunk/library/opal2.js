// Generated by CoffeeScript 1.4.0
/*
	Opal JavaScript Library
	http://code.google.com/p/jmodel/

	Copyright (c) 2009-2013 Richard Baker
	Dual licensed under the MIT and GPL licenses
*/

var __slice = [].slice,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

define(function() {
  var Integer, _base, _ref;
  Function.identity = function(x) {
    return x;
  };
  Function.constant = function(constant) {
    return function() {
      return constant;
    };
  };
  Function.argument = function(n) {
    return function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return args[n];
    };
  };
  Function.map = function(mapping) {
    return function(key) {
      return mapping[key];
    };
  };
  Function.pipe = function() {
    var fn, fns;
    fn = arguments[0], fns = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    switch (arguments.length) {
      case 1:
        return fn;
      case 0:
        return Function.identity;
      default:
        return fn.then(Function.pipe.apply(Function, fns));
    }
  };
  Function.compose = function() {
    var fn, fns, _ref;
    fn = arguments[0], fns = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    switch (arguments.length) {
      case 1:
        return fn;
      case 0:
        return Function.identity;
      default:
        return Function.pipe.apply(Function, (_ref = [fn]).concat.apply(_ref, fns).reverse());
    }
  };
  Function.or = function() {
    var predicate, predicates;
    predicate = arguments[0], predicates = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    switch (arguments.length) {
      case 1:
        return predicate;
      case 0:
        return function() {
          return false;
        };
      default:
        return predicate.or(Function.or.apply(Function, predicates));
    }
  };
  Function.and = function() {
    var predicate, predicates;
    predicate = arguments[0], predicates = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    switch (arguments.length) {
      case 1:
        return predicate;
      case 0:
        return function() {
          return true;
        };
      default:
        return predicate.and(Function.and.apply(Function, predicates));
    }
  };
  Function.not = function(predicate) {
    if (typeof predicate === 'function') {
      return predicate.not();
    } else {
      return !predicate;
    }
  };
  Function.ordering = Function.or;
  Function.eq = function(value) {
    return Predicate(function(x) {
      return x === value;
    });
  };
  Function.neq = function(value) {
    return Predicate(function(x) {
      return x !== value;
    });
  };
  Function.lt = function(value) {
    return Predicate(function(x) {
      return x < value;
    });
  };
  Function.gt = function(value) {
    return Predicate(function(x) {
      return x > value;
    });
  };
  Function.lte = function(value) {
    return Predicate(function(x) {
      return x <= value;
    });
  };
  Function.gte = function(value) {
    return Predicate(function(x) {
      return x >= value;
    });
  };
  Function.between = function(lower, higher) {
    return Predicate(function(x) {
      return (lower <= x && x <= higher);
    });
  };
  /*
  		Function.prototype
  */

  Function.prototype.as = function(name) {
    this.displayName = name;
    return this;
  };
  Function.prototype.bind = function() {
    var args1, context, fn;
    context = arguments[0], args1 = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    fn = this;
    return function() {
      var args2;
      args2 = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return fn.apply(context, args1.concat(args2));
    };
  };
  Function.prototype.curry = function() {
    var args1, fn;
    args1 = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    fn = this;
    return function() {
      var args2;
      args2 = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return fn.apply(this, args1.concat(args2));
    };
  };
  Function.prototype.except = function(handler) {
    var fn;
    fn = this;
    return function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      try {
        return fn.apply(this, args);
      } catch (error) {
        return handler.call(this, error);
      }
    };
  };
  Function.prototype.memo = function() {
    var cache, fn;
    cache = {};
    fn = this.post(function() {
      var args, ret;
      ret = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return cache[args] = ret;
    });
    return function() {
      var args, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return (_ref = cache[args]) != null ? _ref : fn.apply(this, arguments);
    };
  };
  if ((_ref = (_base = Function.prototype).delay) == null) {
    _base.delay = function() {
      var args1, duration, fn;
      duration = arguments[0], args1 = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (duration == null) {
        duration = 1;
      }
      fn = this;
      return function() {
        var args2;
        args2 = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return setTimeout(fn.curry.apply(fn, args1.concat(args2)), duration);
      };
    };
  }
  Function.prototype.map = function(mapping) {
    return this.then(Function.map(mapping));
  };
  Function.prototype.then = function(fn2) {
    var fn1;
    fn1 = this;
    return function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return fn2.call(this, fn1.apply(this, args));
    };
  };
  Function.prototype.but = function(fn2) {
    var fn1;
    fn1 = this;
    return function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      fn1.apply(this, args);
      return fn2.apply(this, args);
    };
  };
  Function.prototype.pre = function(pre) {
    return pre.but(this);
  };
  Function.prototype.post = function(post) {
    var fn;
    fn = this;
    return function() {
      var args, ret;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      ret = fn.apply(this, args);
      post.apply(this, [ret].concat(args));
      return ret;
    };
  };
  Function.prototype.require = function() {
    var predicate, predicates;
    predicates = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    predicate = Function.and.apply(Function, predicates);
    return this.pre(function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (!predicate.apply(this, args)) {
        throw 'Precondition failure';
      }
    });
  };
  Function.prototype.ensure = function() {
    var predicate, predicates;
    predicates = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    predicate = Function.and.apply(Function, predicates);
    return this.post(function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (!predicate.apply(this, args)) {
        throw 'Postcondition failure';
      }
    });
  };
  Function.prototype.and = function(fn2) {
    var fn1;
    fn1 = this;
    return function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return fn1.apply(this, args) && fn2.apply(this, args);
    };
  };
  Function.prototype.or = function(fn2) {
    var fn1;
    fn1 = this;
    return function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return fn1.apply(this, args) || fn2.apply(this, args);
    };
  };
  Function.prototype.not = function() {
    var fn;
    fn = this;
    return function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return !fn.apply(this, args);
    };
  };
  Function.prototype.is = Function.prototype.then;
  Function.prototype.eq = function(value) {
    return this.then(Function.eq(value));
  };
  Function.prototype.neq = function(value) {
    return this.then(Function.neq(value));
  };
  Function.prototype.lt = function(value) {
    return this.then(Function.lt(value));
  };
  Function.prototype.gt = function(value) {
    return this.then(Function.gt(value));
  };
  Function.prototype.lte = function(value) {
    return this.then(Function.lte(value));
  };
  Function.prototype.gte = function(value) {
    return this.then(Function.gte(value));
  };
  Function.prototype.between = function(lower, higher) {
    return this.then(Function.between(lower, higher));
  };
  Function.prototype.matches = function(regex) {
    return this.then(function(x) {
      return regex.test(x);
    });
  };
  Function.prototype.isnull = function() {
    return this.then(Function.eq(null));
  };
  Function.prototype.isa = function(constructor) {
    return this.then(function(x) {
      return x instanceof constructor;
    });
  };
  Function.prototype.hastype = function(type) {
    return this.then(function(x) {
      return typeof x === type;
    });
  };
  Function.prototype.asc = function() {
    var fn;
    fn = this;
    return function(a, b) {
      var fna, fnb;
      fna = fn.call(this, a);
      fnb = fn.call(this, b);
      if (fna < fnb) {
        return -1;
      }
      if (fna > fnb) {
        return 1;
      }
      return 0;
    };
  };
  Function.prototype.desc = function() {
    return this.asc().then(function(x) {
      return -x;
    });
  };
  Function.prototype.create = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return Object.construct(this).apply(null, args);
  };
  Function.prototype.Where = function(predicate, message) {
    var base, parent, property, restricted, value;
    if (message == null) {
      message = 'Invalid value';
    }
    parent = this;
    base = parent.base || parent;
    restricted = function() {
      var args, value;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      value = parent(args);
      if (predicate(value)) {
        return value;
      } else {
        throw message.replace('<value>', value);
      }
    };
    restricted.base = base;
    restricted.__predicate = predicate;
    for (property in base) {
      value = base[property];
      restricted[property] = value;
    }
    return restricted;
  };
  Function.To = function(type) {
    var predicate;
    predicate = Object.isa(type);
    return function(fn) {
      return function() {
        var args, val;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        val = fn.apply(this, args);
        if (predicate(val)) {
          return val;
        } else {
          throw 'Invalid return type';
        }
      };
    };
  };
  window.Predicate = Function.identity;
  Object.isa = function(constructor) {
    if (constructor === Number) {
      return function(obj) {
        return obj instanceof Number || typeof (obj = 'number');
      };
    } else if (constructor === String) {
      return function(obj) {
        return obj instanceof String || typeof (obj = 'string');
      };
    } else {
      return function(obj) {
        return obj instanceof Constructor;
      };
    }
  };
  Number.__predicate = Object.isa(Number);
  Integer = Number.Where(function(value) {
    return value === Math.round(value);
  });
  Number.LessThan = function(max) {
    return Number.Where(Function.lt(max), "Invalid Value: <value> is not less than " + max);
  };
  Number.GreaterThan = function(min) {
    return Number.Where(Function.gt(min), "Invalid Value: <value> is not greater than " + min);
  };
  Number.Positive = Number.GreaterThan(0);
  Number.Negative = Number.LessThan(0);
  Number.Between = function(min, max) {
    return Number.Where(Function.between(min, max), "Invalid Value: <value> is not between " + min + " and " + max);
  };
  String.__predicate = Object.isa(String);
  String.In = function() {
    var cons, strings;
    strings = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    cons = function(str) {
      var string;
      if (cons.__predicate(str)) {
        return str;
      } else {
        throw "Invalid String: \"" + str + "\" is not in {" + (((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = strings.length; _i < _len; _i++) {
            string = strings[_i];
            _results.push('\"' + string + '\"');
          }
          return _results;
        })()).join(',')) + "}";
      }
    };
    cons.__predicate = function(str) {
      return String.__predicate(str) && __indexOf.call(strings, str) >= 0;
    };
    return cons;
  };
  return String.Matching = function(regex) {
    var cons;
    cons = function(str) {
      if (cons.__predicate(str)) {
        return str;
      } else {
        throw "Invalid String: \"" + str + "\" does not match " + (regex.toString());
      }
    };
    cons.__predicate = function(str) {
      return String.__predicate(str) && regex.test(str);
    };
    return cons;
  };
});
