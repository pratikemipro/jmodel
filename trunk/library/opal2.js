// Generated by CoffeeScript 1.7.1

/*
		Opal JavaScript Library
		http://code.google.com/p/jmodel/

		Copyright (c) 2009-2013 Richard Baker
		Dual licensed under the MIT and GPL licenses
 */
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

define(function() {
  var Constructor, Promise, Type, _base;
  window.Value = function() {};
  window.Value.equal = function(x, y) {
    return x === y;
  };
  window.Value.valid = function(x) {
    return x !== void 0;
  };
  window.Scalar = function() {};
  window.Scalar.valid = function(x) {
    return typeof x === 'number' || typeof x === 'string' || typeof x === 'boolean' || x === null || x instanceof Number || x instanceof String || x instanceof Boolean;
  };
  window.Not = function(constructor) {
    var fn, valid;
    fn = function() {};
    valid = Object.isa(constructor);
    fn.valid = function(x) {
      return (x != null) && !valid(x);
    };
    return fn;
  };
  Object.isa = function(constructor) {
    switch (false) {
      case constructor !== Number:
        return function(obj) {
          return obj instanceof Number || typeof obj === 'number';
        };
      case constructor !== String:
        return function(obj) {
          return obj instanceof String || typeof obj === 'string';
        };
      case constructor !== Boolean:
        return function(obj) {
          return obj instanceof Boolean || typeof obj === 'boolean';
        };
      case constructor !== Value:
        return function(obj) {
          return obj !== void 0;
        };
      case constructor.valid == null:
        return function(obj) {
          return constructor.valid(obj);
        };
      default:
        return function(obj) {
          return obj instanceof constructor;
        };
    }
  };
  window.PreconditionError = (function(_super) {
    __extends(_Class, _super);

    function _Class() {
      return _Class.__super__.constructor.apply(this, arguments);
    }

    return _Class;

  })(Error);
  window.PostconditionError = (function(_super) {
    __extends(_Class, _super);

    function _Class() {
      return _Class.__super__.constructor.apply(this, arguments);
    }

    return _Class;

  })(Error);
  Array.concat = function() {
    var arrays, _ref;
    arrays = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return (_ref = []).concat.apply(_ref, arrays);
  };
  Array.map = function(fn) {
    return function(arr) {
      return arr.map(fn);
    };
  };
  Array.reduce = function(reduction, initial) {
    return function(array) {
      return array.reduce(reduction, initial || reduction.unit);
    };
  };
  Array.zip = function() {
    var arr, arrays, i, maxIndex, _i, _results;
    arrays = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    maxIndex = Math.min.apply(Math, (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = arrays.length; _i < _len; _i++) {
        arr = arrays[_i];
        _results.push(arr.length - 1);
      }
      return _results;
    })());
    if (maxIndex === (-1) || maxIndex === Infinity) {
      return [];
    }
    _results = [];
    for (i = _i = 0; 0 <= maxIndex ? _i <= maxIndex : _i >= maxIndex; i = 0 <= maxIndex ? ++_i : --_i) {
      _results.push((function() {
        var _j, _len, _results1;
        _results1 = [];
        for (_j = 0, _len = arrays.length; _j < _len; _j++) {
          arr = arrays[_j];
          _results1.push(arr[i]);
        }
        return _results1;
      })());
    }
    return _results;
  };
  Array.zipWith = function(fn) {
    return function() {
      var arrays;
      arrays = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return Array.zip.apply(Array, arrays).map(function(arr) {
        return fn.apply(null, arr);
      });
    };
  };
  Array.flatten = function(array) {
    var arr;
    if (array == null) {
      array = [];
    }
    return Array.concat.apply(Array, (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = array.length; _i < _len; _i++) {
        arr = array[_i];
        _results.push(arr instanceof Array ? Array.flatten(arr) : arr);
      }
      return _results;
    })());
  };
  Array.equal = function(a, b) {
    return a.length === b.length && Array.reduce(Boolean.and)(Array.zipWith(Value.equal)(a, b));
  };
  Array.hastypes = function() {
    var types;
    types = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return function(array) {
      var array2, type, types2, value;
      if (array == null) {
        array = [];
      }
      if (types.length === 0 && array.length === 0) {
        return true;
      }
      types2 = types.slice(0);
      array2 = array.slice(0);
      value = void 0;
      while (type = types2.shift()) {
        if (type instanceof Array) {
          type = type[0];
          while (array2.length > 0 && Object.isa(type)(array2[0])) {
            array2.shift();
          }
        } else {
          value = array2.shift();
          if (!Object.isa(type)(value)) {
            return false;
          }
        }
      }
      return types2.length === 0 && array2.length === 0;
    };
  };
  Array.all = function(predicate) {
    return function(array) {
      var x;
      return Array.reduce(Boolean.and)((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = array.length; _i < _len; _i++) {
          x = array[_i];
          _results.push(predicate.call(x, x));
        }
        return _results;
      })());
    };
  };
  Array.prototype.all = function(predicate) {
    return Array.all(predicate)(this);
  };
  Array.any = function(predicate) {
    return function(array) {
      var x;
      return Array.reduce(Boolean.or)((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = array.length; _i < _len; _i++) {
          x = array[_i];
          _results.push(predicate.call(x, x));
        }
        return _results;
      })());
    };
  };
  Array.prototype.any = function(predicate) {
    return Array.any(predicate)(this);
  };
  Array.none = function(predicate) {
    return Array.any(predicate).not();
  };
  Array.prototype.none = function(predicate) {
    return Array.none(predicate)(this);
  };
  Array.prototype.ordered = function() {
    var x, y;
    return Array.reduce(Boolean.and)((function() {
      var _i, _len, _ref, _ref1, _results;
      _ref = Array.zip(this, this.slice(1));
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        _ref1 = _ref[_i], x = _ref1[0], y = _ref1[1];
        _results.push(x < y);
      }
      return _results;
    }).call(this));
  };
  Array.count = function(predicate) {
    if (predicate == null) {
      predicate = Boolean.True;
    }
    return function(acc, value) {
      if (acc == null) {
        acc = 0;
      }
      return acc + (predicate.call(value, value) ? 1 : 0);
    };
  };
  Array.count.unit = 0;
  Array.prototype.count = function(predicate) {
    return this.reduce(Array.count(predicate), 0);
  };
  Array.contains = function(predicate) {
    if (predicate == null) {
      predicate = Boolean.True;
    }
    return function(acc, value) {
      if (acc == null) {
        acc = false;
      }
      return acc || predicate.call(value, value);
    };
  };
  Array.contains.unit = false;
  Array.prototype.contains = function(predicate) {
    return this.reduce(Array.contains(predicate), false);
  };
  Function.prototype.extend = function(properties) {
    return Object.extend(this, properties);
  };
  Function.identity = function(x) {
    return x;
  };
  Function.constant = function(constant) {
    return function() {
      return constant;
    };
  };
  Function["arguments"] = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return args;
  };
  Function.argument = function(n) {
    return function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return args[n];
    };
  };
  Function.map = function(mapping) {
    return function(key) {
      return mapping[key];
    };
  };
  Function.overload = function(variants) {
    var fn;
    if (variants == null) {
      variants = [];
    }
    fn = function() {
      var args, variant, _i, _len;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      for (_i = 0, _len = variants.length; _i < _len; _i++) {
        variant = variants[_i];
        if (variant.matches.apply(variant, args)) {
          return variant.apply(this, args);
        }
      }
      return void 0;
    };
    return fn.extend({
      extend: function(variants2) {
        if (variants2 == null) {
          variants2 = [];
        }
        return Function.overload(__slice.call(variants2).concat(__slice.call(variants)));
      }
    });
  };
  Function.match = function(variants) {
    if (variants == null) {
      variants = [];
    }
    return function(value) {
      var variant, _i, _len;
      for (_i = 0, _len = variants.length; _i < _len; _i++) {
        variant = variants[_i];
        if (variant.matches(value)) {
          return variant.apply(value, value);
        }
      }
      return void 0;
    };
  };
  Function.prototype.then = function(fn2) {
    var fn1;
    if (typeof fn2 !== 'function') {
      throw new PreconditionError;
    }
    fn1 = this;
    return function() {
      var context, first, rest, val1;
      first = arguments[0], rest = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      context = this !== window ? typeof this !== "undefined" && this !== null ? this : first : first;
      val1 = fn1.call.apply(fn1, [context, first].concat(__slice.call(rest)));
      return fn2.call(val1, val1);
    };
  };
  Function.prototype.but = function(fn2) {
    var fn1;
    if (typeof fn2 !== 'function') {
      throw new PreconditionError;
    }
    fn1 = this;
    return function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      fn1.apply(this, args);
      return fn2.apply(this, args);
    };
  };
  Function.pipe = function() {
    var fn, fns, _ref;
    fn = arguments[0], fns = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    if ((_ref = typeof fn) !== 'function' && _ref !== 'undefined') {
      throw new PreconditionError;
    }
    switch (arguments.length) {
      case 1:
        return fn;
      case 0:
        return Function.identity;
      default:
        return fn.then(Function.pipe.apply(Function, fns));
    }
  };
  Function.compose = function() {
    var fn, fns, _ref;
    fn = arguments[0], fns = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    if ((_ref = typeof fn) !== 'function' && _ref !== 'undefined') {
      throw new PreconditionError;
    }
    switch (arguments.length) {
      case 1:
        return fn;
      case 0:
        return Function.identity;
      default:
        return Function.pipe.apply(Function, __slice.call(arguments).reverse());
    }
  };
  Function.prototype.pre = function(pre) {
    if (typeof pre !== 'function') {
      throw new PreconditionError;
    }
    return pre.but(this);
  };
  Function.prototype.post = function(post) {
    var fn;
    if (typeof post !== 'function') {
      throw new PreconditionError;
    }
    fn = this;
    return function() {
      var args, ret;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      ret = fn.apply(this, args);
      post.call.apply(post, [this, ret].concat(__slice.call(args)));
      return ret;
    };
  };
  Function.prototype.matches = function() {
    return true;
  };
  Function.prototype.require = function(predicate, message) {
    if (message == null) {
      message = '';
    }
    return this.pre(function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (!predicate.apply(this, args)) {
        throw new PreconditionError(message);
      }
    });
  };
  Function.prototype.ensure = function(predicate, message) {
    if (message == null) {
      message = '';
    }
    return this.post(function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (!predicate.apply(this, args)) {
        throw new PostconditionError(message);
      }
    });
  };
  Function.hastypes = function() {
    var predicate, types;
    types = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    predicate = Array.hastypes.apply(Array, types);
    return function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return predicate(args);
    };
  };
  Function.prototype.Requiring = function(predicate, message) {
    return this.then(function(fn) {
      var fn2;
      fn2 = fn.require(predicate, message);
      fn2.matches = predicate;
      return fn2;
    });
  };
  Function.Requiring = function(predicate, message) {
    return function(fn) {
      var fn2;
      fn2 = fn.require(predicate, message);
      fn2.matches = predicate;
      return fn2;
    };
  };
  Function.prototype.Ensuring = function(predicate, message) {
    return this.then(function(fn) {
      return fn.ensure(predicate, message);
    });
  };
  Function.Ensuring = function(predicate, message) {
    return function(fn) {
      return fn.ensure(predicate, message);
    };
  };
  Function.prototype.From = function() {
    var types;
    types = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.Requiring(Function.hastypes.apply(Function, types), 'Incorrect source type. Arguments are');
  };
  Function.From = function() {
    var types;
    types = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return Function.Requiring(Function.hastypes.apply(Function, types), 'Incorrect source type. Arguments are');
  };
  Function.prototype.To = function(type) {
    return this.Ensuring(Object.isa(type), 'Incorrect target type. Returned value is');
  };
  Function.To = function(type) {
    return Function.Ensuring(Object.isa(type), 'Incorrect target type. Returned value is');
  };
  Function.Of = function(constructor) {
    var ensure;
    ensure = Object.ensure(constructor);
    return function(fn) {
      return function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return fn.call(this, ensure.apply(null, args));
      };
    };
  };
  window.Predicate = Function.To(Boolean);
  Function.Defaults = function(defaults) {
    if (defaults == null) {
      defaults = {};
    }
    return function(fn) {
      return function(object) {
        return fn.call(this, Object.union(defaults, object));
      };
    };
  };
  Function.prototype.Defaults = function(defaults) {
    var fn1;
    if (defaults == null) {
      defaults = {};
    }
    fn1 = this;
    return function(fn) {
      return function(object) {
        return fn1.call(this, fn).call(this, Object.union(defaults, object));
      };
    };
  };
  Function.prototype.defaults = function(defaults) {
    var fn, fn2;
    if (defaults == null) {
      defaults = {};
    }
    fn = this;
    return fn2 = function(object) {
      if (this.constructor === fn2) {
        return new fn(Object.union(defaults, object));
      } else {
        return fn.call(this, Object.union(defaults, object));
      }
    };
  };
  Function.Returning = function(val) {
    return function(fn) {
      return function() {
        var args, ret;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        ret = val.call(this);
        fn.call(this, ret).apply(this, args);
        return ret;
      };
    };
  };
  Function.prototype.Returning = function(val) {
    return Function.Returning(val).then(this);
  };
  Function.Constant = function(constant) {
    return function(fn) {
      return fn.but(function() {
        return constant;
      });
    };
  };
  Function.Chaining = Function.From(Function)(function(fn) {
    return fn.but(function() {
      return this;
    });
  });
  Function.prototype.Chaining = Function.From(Function)(function(fn) {
    return this(fn).but(function() {
      return this;
    });
  });
  Function.prototype.and = Function.From(Function)(function(predicate2) {
    var predicate1;
    predicate1 = this;
    return Predicate(function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return predicate1.apply(this, args) && predicate2.apply(this, args);
    });
  });
  Function.prototype.or = Function.From(Function)(function(predicate2) {
    var predicate1;
    predicate1 = this;
    return Predicate(function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return predicate1.apply(this, args) || predicate2.apply(this, args);
    });
  });
  Function.prototype.not = function() {
    var predicate;
    predicate = this;
    return Predicate(function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return !predicate.apply(this, args);
    });
  };
  Function.and = Function.From([Function]).To(Function)(function() {
    var predicate, predicates;
    predicate = arguments[0], predicates = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    switch (arguments.length) {
      case 1:
        return predicate;
      case 0:
        return function() {
          return true;
        };
      default:
        return predicate.and(Function.and.apply(Function, predicates));
    }
  });
  Function.or = Function.From([Function]).To(Function)(function() {
    var predicate, predicates;
    predicate = arguments[0], predicates = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    switch (arguments.length) {
      case 1:
        return predicate;
      case 0:
        return function() {
          return false;
        };
      default:
        return predicate.or(Function.or.apply(Function, predicates));
    }
  });
  Function.not = function(predicate) {
    if (typeof predicate === 'function') {
      return predicate.not();
    } else {
      return !predicate;
    }
  };
  Function.delegate = function(fn) {
    return function() {
      var args, context, method, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      _ref = fn.call(this), context = _ref[0], method = _ref[1];
      return method.apply(context, args);
    };
  };
  Function.delegates = function(fn) {
    var index, _i, _results;
    _results = [];
    for (index = _i = 0; _i <= 9; index = ++_i) {
      _results.push((function(index) {
        return function() {
          var args, context, fns, _ref;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          _ref = fn.call(this), context = _ref[0], fns = 2 <= _ref.length ? __slice.call(_ref, 1) : [];
          return fns[index].apply(context, args);
        };
      })(index));
    }
    return _results;
  };
  Function.ordering = Function.or;
  Function.eq = function(value) {
    return Predicate(function(x) {
      return x === value;
    });
  };
  Function.prototype.eq = function(value) {
    return this.then(Function.eq(value));
  };
  Function.neq = function(value) {
    return Predicate(function(x) {
      return x !== value;
    });
  };
  Function.prototype.neq = function(value) {
    return this.then(Function.neq(value));
  };
  Function.lt = function(value) {
    return Predicate(function(x) {
      return x < value;
    });
  };
  Function.prototype.lt = function(value) {
    return this.then(Function.lt(value));
  };
  Function.gt = function(value) {
    return Predicate(function(x) {
      return x > value;
    });
  };
  Function.prototype.gt = function(value) {
    return this.then(Function.gt(value));
  };
  Function.lte = function(value) {
    return Predicate(function(x) {
      return x <= value;
    });
  };
  Function.prototype.lte = function(value) {
    return this.then(Function.lte(value));
  };
  Function.gte = function(value) {
    return Predicate(function(x) {
      return x >= value;
    });
  };
  Function.prototype.gte = function(value) {
    return this.then(Function.gte(value));
  };
  Function.between = (Function.Requiring(function(lower, higher) {
    return lower < higher;
  }))(function(lower, higher) {
    return Predicate(function(x) {
      return (lower <= x && x <= higher);
    });
  });
  Function.prototype.between = function(lower, higher) {
    return this.then(Function.between(lower, higher));
  };
  Function.prototype.is = Function.prototype.then;
  Function.prototype.matches = function(regex) {
    return this.then(Predicate(function(x) {
      return regex.test(x);
    }));
  };
  Function.prototype.isnull = function() {
    return this.then(Function.eq(null));
  };
  Function.prototype.isa = function(constructor) {
    return this.then(Predicate(function(x) {
      return x instanceof constructor;
    }));
  };
  Function.prototype.hastype = function(type) {
    return this.then(Object.type.eq(type));
  };
  Function.prototype.isa = function(constructor) {
    return this === constructor || this.prototype instanceof constructor;
  };
  Function.prototype.bind = function() {
    var args1, context, fn;
    context = arguments[0], args1 = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    fn = this;
    return function() {
      var args2;
      args2 = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return fn.call.apply(fn, [context].concat(__slice.call(args1), __slice.call(args2)));
    };
  };
  Function.prototype.curry = function() {
    var args1, fn;
    args1 = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    fn = this;
    return function() {
      var args2;
      args2 = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return fn.call.apply(fn, [this].concat(__slice.call(args1), __slice.call(args2)));
    };
  };
  Function.prototype.except = function(handler) {
    var fn;
    fn = this;
    return function() {
      var args, error;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      try {
        return fn.apply(this, args);
      } catch (_error) {
        error = _error;
        return handler.call(this, error);
      }
    };
  };
  Function.prototype.memo = function() {
    var cache, fn;
    cache = {};
    fn = this.post(function() {
      var args, ret;
      ret = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return cache[args] = ret;
    });
    return function() {
      var args, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return (_ref = cache[args]) != null ? _ref : fn.apply(this, arguments);
    };
  };
  if ((_base = Function.prototype).delay == null) {
    _base.delay = function() {
      var args1, duration, fn;
      duration = arguments[0], args1 = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (duration == null) {
        duration = 1;
      }
      fn = this;
      return function() {
        var args2, _ref;
        args2 = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return setTimeout((_ref = fn.curry).call.apply(_ref, [fn].concat(__slice.call(args1), __slice.call(args2))), duration);
      };
    };
  }
  Function.prototype.map = function(mapping) {
    return this.then(Function.map(mapping));
  };
  Function.prototype.asc = function() {
    var fn;
    fn = this;
    return function(a, b) {
      var fna, fnb;
      fna = fn.call(this, a);
      fnb = fn.call(this, b);
      if (fna < fnb) {
        return -1;
      }
      if (fna > fnb) {
        return 1;
      }
      return 0;
    };
  };
  Function.prototype.desc = function() {
    return this.asc().then(function(x) {
      return -x;
    });
  };
  Function.prototype.create = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return Object.construct(this).apply(null, args);
  };
  Function.prototype.Where = function(predicate, message) {
    var property, restricted, value, _ref;
    if (message == null) {
      message = 'Invalid value';
    }
    restricted = this.post(function(value) {
      if (!predicate.call(value, value)) {
        throw new PostconditionError(message.replace('<value>', value));
      }
    });
    restricted.base = this.base || this;
    _ref = restricted.base;
    for (property in _ref) {
      value = _ref[property];
      restricted[property] = value;
    }
    restricted.valid = function(value) {
      return Object.isa(restricted.base)(value) && predicate.call(value, value);
    };
    return restricted;
  };
  window.Constructor = Constructor = Function;
  Constructor.Inheriting = function(parent) {
    var fn1;
    fn1 = function() {};
    fn1.valid = function(constructor) {
      return constructor.isa(parent);
    };
    return fn1;
  };
  window.Type = Type = function(constructor) {
    return function(fn) {
      return fn.extend({
        matches: Object.isa(constructor)
      });
    };
  };
  Type.union = Function.From(Function).Returning(function() {
    return (function() {
      function _Class() {}

      return _Class;

    })();
  })(function(type) {
    return function(fn) {
      var constructor, name, subtype, subtypes, _i, _len, _ref, _results, _results1;
      fn = Function.To(Object.Of(Function))(fn);
      subtype = function(constructor) {
        return (function(_super) {
          var _class;

          __extends(_Class, _super);

          function _Class() {
            return _class.apply(this, arguments);
          }

          _class = constructor || function() {};

          return _Class;

        })(type);
      };
      subtypes = fn.call(type);
      if (subtypes instanceof Array) {
        _results = [];
        for (_i = 0, _len = subtypes.length; _i < _len; _i++) {
          name = subtypes[_i];
          _results.push((function(name) {
            return type[name] = subtype(function() {});
          })(name));
        }
        return _results;
      } else {
        _ref = fn.call(type);
        _results1 = [];
        for (name in _ref) {
          constructor = _ref[name];
          _results1.push((function(name, constructor) {
            return type[name] = subtype(constructor);
          })(name, constructor));
        }
        return _results1;
      }
    };
  });
  Object.extend = Function.From(Object, Object).To(Object)(function(target, source) {
    var key;
    for (key in source) {
      if (!__hasProp.call(source, key)) continue;
      target[key] = source[key];
    }
    return target;
  });
  Object.construct = Function.From(Function, [Value])(function() {
    var args1, constructor;
    constructor = arguments[0], args1 = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    switch (false) {
      case constructor !== Number && constructor !== String && constructor !== Boolean:
        return constructor;
      case constructor !== Date:
        return function() {
          var args, args2;
          args2 = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          args = __slice.call(args1).concat(__slice.call(args2));
          switch (args.length) {
            case 1:
              return new Date(args[0]);
            case 3:
              return new Date(args[0], args[1], args[2]);
            case 7:
              return new Date(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
          }
        };
      default:
        return function() {
          var args2;
          args2 = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return (function(func, args, ctor) {
            ctor.prototype = func.prototype;
            var child = new ctor, result = func.apply(child, args);
            return Object(result) === result ? result : child;
          })(constructor, __slice.call(args1).concat(__slice.call(args2)), function(){});
        };
    }
  });
  Object.valid = function(constructor) {
    switch (constructor) {
      case Number:
        return function(number) {
          return Object.isa(Number)(number) && !isNan(number);
        };
      case Date:
        return function(date) {
          return Object.isa(Date)(date) && date.toString() !== 'Invalid Date';
        };
      default:
        return Object.isa(constructor);
    }
  };
  Object.ensure = function(constructor) {
    var construct, isa;
    isa = Object.isa(constructor);
    construct = Object.construct.apply(Object, arguments);
    return function(obj) {
      if (isa(obj)) {
        return obj;
      } else {
        return construct.apply(null, arguments);
      }
    };
  };
  Object.copy = function(obj) {
    return Object.extend({}, obj);
  };
  Object.type = function(obj) {
    return typeof obj;
  };
  Object.eq = function(value) {
    return function(object) {
      return object === value;
    };
  };
  if (Object.keys == null) {
    Object.keys = Function.From(Object).To(Array)(function(object) {
      var key, _results;
      _results = [];
      for (key in object) {
        if (!__hasProp.call(object, key)) continue;
        _results.push(key);
      }
      return _results;
    });
  }
  Object.has = Function.From(Scalar)(function(key) {
    return Function.From(Object).To(Boolean)(function(object) {
      return __indexOf.call(Object.keys(object), key) >= 0;
    });
  });
  Object.property = Function.overload([
    Function.From(String, Value)(function(property, value) {
      return Function.Requiring(Object.has(property), 'Undefined property')(function(obj) {
        obj[property] = value;
        return obj;
      });
    }), Function.From(String)(function(property) {
      return function(obj) {
        return obj[property];
      };
    })
  ]);
  Object.method = Function.overload([
    Function.From(String, [Value])(function() {
      var args1, method;
      method = arguments[0], args1 = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return function() {
        var args2, obj;
        obj = arguments[0], args2 = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        if (!obj[method]) {
          throw new Error('Undefined method');
        }
        return obj[method].apply(obj, __slice.call(args1).concat(__slice.call(args2)));
      };
    }), Function.From(Function, [Value])(function() {
      var args1, fn;
      fn = arguments[0], args1 = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return function() {
        var args2, obj;
        obj = arguments[0], args2 = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        return fn.call.apply(fn, [obj].concat(__slice.call(args1), __slice.call(args2)));
      };
    })
  ]);
  Object.resolve = function() {
    var args1, name;
    name = arguments[0], args1 = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return function() {
      var args2, obj;
      obj = arguments[0], args2 = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (!obj[name]) {
        return void 0;
      }
      if (typeof obj[name] === 'function') {
        return Object.method.apply(Object, [name].concat(__slice.call(__slice.call(args1).concat(__slice.call(args2)))))(obj);
      } else {
        return Object.property.apply(Object, [name].concat(__slice.call(__slice.call(args1).concat(__slice.call(args2)))))(obj);
      }
    };
  };
  Object.path = function(path, separator) {
    var first, rest;
    if (path == null) {
      path = [];
    }
    if (separator == null) {
      separator = '.';
    }
    if (typeof path === 'string') {
      return Object.path(path.split(separator));
    }
    first = path[0], rest = 2 <= path.length ? __slice.call(path, 1) : [];
    switch (path.length) {
      case 0:
        return Function.constant(void 0);
      case 1:
        return Object.resolve(first);
      default:
        return Object.resolve(first).then(Object.path(rest));
    }
  };
  Object.Of = Function.From(Constructor)(function(constructor) {
    var fn, test;
    test = Object.isa(constructor);
    fn = function() {};
    fn.valid = function(obj) {
      var key, value;
      return Array.reduce(Boolean.and)((function() {
        var _results;
        _results = [];
        for (key in obj) {
          if (!__hasProp.call(obj, key)) continue;
          value = obj[key];
          _results.push(test(value));
        }
        return _results;
      })());
    };
    return fn;
  });
  Object.from = Function.From(Scalar, Value).Returning(function() {
    return new Object;
  })(function(obj) {
    return function(key, value) {
      return obj[key] = value;
    };
  });
  Object.equal = Predicate.From(Object, Object)(function(a, b) {
    var prop;
    return Array.reduce(Boolean.and)(__slice.call((function() {
        var _results;
        _results = [];
        for (prop in a) {
          if (!__hasProp.call(a, prop)) continue;
          _results.push(a[prop] === b[prop]);
        }
        return _results;
      })()).concat(__slice.call((function() {
        var _results;
        _results = [];
        for (prop in b) {
          if (!__hasProp.call(b, prop)) continue;
          _results.push(a[prop] === b[prop]);
        }
        return _results;
      })())));
  });
  Object.remove = Function.From([Scalar])(function() {
    var fields;
    fields = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return Function.From(Object).Returning(function() {
      return new Object;
    })(function(obj) {
      return function(source) {
        var key, value, _results;
        _results = [];
        for (key in source) {
          if (!__hasProp.call(source, key)) continue;
          value = source[key];
          if (__indexOf.call(fields, key) < 0) {
            _results.push(obj[key] = value);
          }
        }
        return _results;
      };
    });
  });
  Object.project = Function.From([Scalar])(function() {
    var fields;
    fields = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return Function.From(Object).Returning(function() {
      return new Object;
    })(function(obj) {
      return function(source) {
        var key, value, _results;
        _results = [];
        for (key in source) {
          if (!__hasProp.call(source, key)) continue;
          value = source[key];
          if (__indexOf.call(fields, key) >= 0) {
            _results.push(obj[key] = value);
          }
        }
        return _results;
      };
    });
  });
  Object.rename = Function.From(Object)(function(renaming) {
    return Function.From(Object).Returning(function() {
      return new Object;
    })(function(obj) {
      return function(source) {
        var key, value, _results;
        _results = [];
        for (key in source) {
          if (!__hasProp.call(source, key)) continue;
          value = source[key];
          _results.push(obj[renaming[key] || key] = value);
        }
        return _results;
      };
    });
  });
  Object.union = Function.overload([
    Function.From(Array).Returning(function() {
      return new Object;
    })(function(union) {
      return function(objects) {
        var key, object, value, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = objects.length; _i < _len; _i++) {
          object = objects[_i];
          _results.push((function() {
            var _results1;
            _results1 = [];
            for (key in object) {
              if (!__hasProp.call(object, key)) continue;
              value = object[key];
              _results1.push(union[key] = value);
            }
            return _results1;
          })());
        }
        return _results;
      };
    }), Function.From([Object])(function() {
      var objects;
      objects = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return Object.union(objects);
    })
  ]);
  Object.intersection = Function.overload([
    Function.From(Array).Returning(function() {
      return new Object;
    })(function(intersection) {
      return function(_arg) {
        var first, key, rest, value, _results;
        first = _arg[0], rest = 2 <= _arg.length ? __slice.call(_arg, 1) : [];
        _results = [];
        for (key in first) {
          if (!__hasProp.call(first, key)) continue;
          value = first[key];
          if (rest.all(Object.has(key))) {
            _results.push(intersection[key] = value);
          }
        }
        return _results;
      };
    }), Function.From([Object])(function() {
      var objects;
      objects = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return Object.intersection(objects);
    })
  ]);
  Object.difference = Function.overload([
    Function.From(Array).Returning(function() {
      return new Object;
    })(function(difference) {
      return function(_arg) {
        var first, key, rest, value, _results;
        first = _arg[0], rest = 2 <= _arg.length ? __slice.call(_arg, 1) : [];
        _results = [];
        for (key in first) {
          if (!__hasProp.call(first, key)) continue;
          value = first[key];
          if (rest.none(Object.has(key))) {
            _results.push(difference[key] = value);
          }
        }
        return _results;
      };
    }), Function.From([Object])(function() {
      var objects;
      objects = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return Object.difference(objects);
    })
  ]);
  Object.join = Function.From(Function)(function(predicate) {
    return Function.From([Object])(function() {
      var objects;
      objects = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (predicate.apply(null, objects)) {
        return Object.union.apply(Object, objects);
      }
    });
  });
  Object.WithDefaults = function(defaults) {
    return function(object) {
      return Object.union(defaults, object);
    };
  };
  Number.valid = function(value) {
    return Object.isa(Number)(value) && !isNaN(value);
  };
  Number.prototype.equals = Function.From(Number)(function(x) {
    return Number(this) === Number(x);
  });
  Number.prototype.plus = Function.From(Number)(function(x) {
    return this + x;
  });
  Number.prototype.minus = Function.From(Number)(function(x) {
    return this - x;
  });
  Number.prototype.times = Function.From(Number)(function(x) {
    return this * x;
  });
  Number.prototype.div = Function.From(Number)(function(x) {
    return this / x;
  });
  Number.prototype.mod = Function.From(Number)(function(x) {
    return this % x;
  });
  Number.prototype.map = Function.From(Function)(function(fn) {
    return fn.call(this, this);
  });
  Number.In = Function.From([Number]).To(Function)(function() {
    var number, numbers;
    numbers = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.Where(function(number) {
      return __indexOf.call(numbers, number) >= 0;
    }, "Invalid Number: \"<value>\" is not in {" + (((function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = numbers.length; _i < _len; _i++) {
        number = numbers[_i];
        _results.push(number);
      }
      return _results;
    })()).join(',')) + "}");
  });
  Number.LessThan = Function.From(Number).To(Function)(function(max) {
    return this.Where(Function.lt(max), "Invalid Value: <value> is not less than " + max);
  });
  Number.GreaterThan = Function.From(Number).To(Function)(function(min) {
    return this.Where(Function.gt(min), "Invalid Value: <value> is not greater than " + min);
  });
  Number.Between = Function.From(Number, Number).To(Function)(function(min, max) {
    return this.Where(Function.between(min, max), "Invalid Value: <value> is not between " + min + " and " + max);
  });
  Number.Integer = Number.Where((function() {
    return this.equals(Math.round(this));
  }), "Invalid Value: <value> is not an integer");
  Number.Positive = Number.GreaterThan(0);
  Number.Negative = Number.LessThan(0);
  Number.Odd = Number.Integer.Where((function() {
    return 1 === this.mod(2);
  }), "Invalid Value: <value> is not odd");
  Number.Even = Number.Integer.Where((function() {
    return 0 === this.mod(2);
  }), "Invalid Value: <value> is not even");
  String.concat = Function.From([String]).To(String)(function() {
    var first, rest;
    first = arguments[0], rest = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    if (first == null) {
      first = '';
    }
    return first.concat.apply(first, rest);
  });
  String.concat.unit = '';
  String.In = Function.From([String]).To(Function)(function() {
    var string, strings;
    strings = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.Where(function() {
      return __indexOf.call(strings, this) >= 0;
    }, "Invalid String: \"<value>\" is not in {" + (((function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = strings.length; _i < _len; _i++) {
        string = strings[_i];
        _results.push('\"' + string + '\"');
      }
      return _results;
    })()).join(',')) + "}");
  });
  String.Matching = Function.From(RegExp).To(Function)(function(regex) {
    return this.Where(function() {
      return regex.test(this);
    }, "Invalid String: \"<value>\" does not match " + (regex.toString()));
  });
  Boolean.True = function() {
    return true;
  };
  Boolean.True.valid = Object.isa(Boolean).and(function(value) {
    return value;
  });
  Boolean.False = function() {
    return false;
  };
  Boolean.False.valid = Object.isa(Boolean).and(function(value) {
    return !value;
  });
  Boolean.and = function(a, b) {
    return a && b;
  };
  Boolean.and.unit = true;
  Boolean.or = function(a, b) {
    return a || b;
  };
  Boolean.or.unit = false;
  Boolean.xor = function(a, b) {
    return (a && !b) || (b && !a);
  };
  Boolean.not = function(a) {
    return !a;
  };
  Math.plus = function(a, b) {
    if (a == null) {
      a = 0;
    }
    if (b == null) {
      b = 0;
    }
    return a + b;
  };
  Math.plus.unit = 0;
  Math.sum = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return args.reduce(Math.plus, 0);
  };
  Math.times = function(a, b) {
    if (a == null) {
      a = 1;
    }
    if (b == null) {
      b = 1;
    }
    return a * b;
  };
  Math.times.unit = 1;
  Math.product = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return args.reduce(Math.times, 1);
  };
  window.Nullable = function(constructor) {
    var construct;
    construct = Object.construct(constructor);
    return function(x) {
      if (arguments.length === 1 && x === null) {
        return null;
      } else {
        return construct.apply(null, arguments);
      }
    };
  };
  window.Maybe = function(base) {
    var construct, derived, valid;
    construct = Object.construct(base);
    valid = Object.isa(base);
    derived = function(x) {
      if (arguments.length === 0 || (x == null)) {
        return void 0;
      } else {
        return construct.apply(null, arguments);
      }
    };
    derived.valid = function(x) {
      return (x == null) || valid(x);
    };
    return derived;
  };
  return window.Promise = Promise = (function() {
    var FULFILLED, PENDING, REJECTED, chain, delay, _ref;

    _ref = [1, 2, 3], PENDING = _ref[0], FULFILLED = _ref[1], REJECTED = _ref[2];

    delay = function(fn) {
      return setTimeout(fn, 0);
    };

    chain = function(promise, fn, value) {
      return delay(function() {
        var reason, ret;
        try {
          ret = fn.apply(null, value);
          return promise.fulfil(ret);
        } catch (_error) {
          reason = _error;
          return promise.reject(reason);
        }
      });
    };

    function Promise() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      this.status = PENDING;
      this.value = void 0;
      this.reason = void 0;
      this.waiting = [];
      if (args.length > 0) {
        this.fulfil.apply(this, args);
      }
    }

    Promise.prototype.then = function(fulfilled, rejected) {
      var promise;
      promise = new this.constructor();
      if (typeof fulfilled !== 'function') {
        fulfilled = Function["arguments"];
      }
      if (typeof rejected !== 'function') {
        rejected = Function.identity;
      }
      switch (this.status) {
        case PENDING:
          this.waiting.push({
            promise: promise,
            fulfilled: fulfilled,
            rejected: rejected
          });
          break;
        case FULFILLED:
          chain(promise, fulfilled, this.value);
          break;
        case REJECTED:
          chain(promise, rejected, [this.reason]);
      }
      return promise;
    };

    Promise.prototype.fulfil = Function.Requiring(function() {
      return this.status === PENDING;
    })(function() {
      var fulfilled, promise, value, _i, _len, _ref1, _ref2, _results;
      value = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      this.value = value;
      this.status = FULFILLED;
      _ref1 = this.waiting;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        _ref2 = _ref1[_i], promise = _ref2.promise, fulfilled = _ref2.fulfilled;
        _results.push(chain(promise, fulfilled, this.value));
      }
      return _results;
    });

    Promise.prototype.reject = Function.Requiring(function() {
      return this.status === PENDING;
    })(function(reason) {
      var promise, rejected, _i, _len, _ref1, _ref2, _results;
      this.reason = reason;
      this.status = REJECTED;
      _ref1 = this.waiting;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        _ref2 = _ref1[_i], promise = _ref2.promise, rejected = _ref2.rejected;
        _results.push(chain(promise, rejected, [this.reason]));
      }
      return _results;
    });

    Promise.Fulfilled = Function.Returning(function() {
      return new this;
    })(function(promise) {
      return function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return promise.fulfil.apply(promise, args);
      };
    });

    Promise.Rejected = Function.Returning(function() {
      return new this;
    })(function(promise) {
      return function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return promise.reject.apply(promise, args);
      };
    });

    Promise.Of = function(constructor) {
      return (function(_super) {
        __extends(_Class, _super);

        function _Class() {
          return _Class.__super__.constructor.apply(this, arguments);
        }

        _Class.prototype.fulfil = Function.Of(constructor)(_Class.prototype.fulfil);

        return _Class;

      })(this);
    };

    Promise.conjoin = function() {};

    Promise.disjoin = Function.From([Promise]).Returning(function() {
      return new this;
    })(function(disjunction) {
      return function() {
        var fulfil, promise, promises, reject, _i, _len, _ref1, _results;
        promises = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        _ref1 = Function.delegates(function() {
          return [disjunction, disjunction.fulfil, disjunction.reject];
        }), fulfil = _ref1[0], reject = _ref1[1];
        _results = [];
        for (_i = 0, _len = promises.length; _i < _len; _i++) {
          promise = promises[_i];
          _results.push(promise.then(fulfil, reject));
        }
        return _results;
      };
    });

    return Promise;

  })();
});

//# sourceMappingURL=opal2.map
