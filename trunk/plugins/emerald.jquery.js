// Generated by CoffeeScript 1.9.1
var slice = [].slice,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(function(require) {
  var $, AjaxEventType;
  $ = require('jquery');
  require('jmodel/emerald2');
  EventType.fromAjax = function() {
    var args;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(AjaxEventType, args, function(){});
  };
  return window.AjaxEventType = AjaxEventType = (function(superClass) {
    extend(AjaxEventType, superClass);

    function AjaxEventType(descriptor, settings) {
      var base, ref;
      this.descriptor = descriptor != null ? descriptor : {};
      AjaxEventType.__super__.constructor.call(this);
      if (typeof settings === 'object') {
        this.descriptor.settings = settings;
      }
      this.descriptor.success = (function(_this) {
        return function() {
          var args, ref;
          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          return (ref = _this.raise).call.apply(ref, [_this].concat(slice.call(args), slice.call(_this.descriptor)));
        };
      })(this);
      this.descriptor.error = (function(_this) {
        return function() {
          var args, ref;
          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          return (ref = _this.fail).call.apply(ref, [_this].concat(slice.call(args), slice.call(_this.descriptor)));
        };
      })(this);
      this.descriptor.beforeSend = function(xhr, settings) {
        var ref, ref1;
        if ((ref = $.ajaxSettings) != null) {
          if (typeof ref.beforeSend === "function") {
            ref.beforeSend(xhr, settings);
          }
        }
        if ((ref1 = settings.type) !== 'GET' && ref1 !== 'POST') {
          xhr.setRequestHeader('X-HTTP-METHOD', settings.type);
          return settings.type = 'POST';
        }
      };
      if ((base = this.descriptor).immediate == null) {
        base.immediate = true;
      }
      this.remember = (ref = this.descriptor.remember) != null ? ref : 1;
      if (this.descriptor.immediate) {
        this.start();
      }
    }

    AjaxEventType.prototype.start = Function.Chaining(function(data) {
      var ref;
      if (data == null) {
        data = {};
      }
      if (this.descriptor.singleton) {
        this.stop();
      }
      this.descriptor.data = Object.extend((ref = this.descriptor.data) != null ? ref : {}, data);
      return this.__ajax = $.ajax.call(null, this.descriptor);
    });

    AjaxEventType.prototype.stop = Function.Chaining(function() {
      return typeof this.__ajax === "function" ? this.__ajax(typeof abort === "function" ? abort() : void 0) : void 0;
    });

    return AjaxEventType;

  })(EventType);
});

//# sourceMappingURL=emerald.jquery.js.map
