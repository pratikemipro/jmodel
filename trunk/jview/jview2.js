// Generated by CoffeeScript 1.9.1
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  slice = [].slice;

define('jview/tiles', function(require) {
  var $, Tile, TileList;
  $ = require('jquery');
  require('jmodel/topaz2');
  Tile = (function() {
    function Tile(li) {
      this.li = li;
      this.events = new EventRegistry('ready', 'dispose');
      this.li.event('click', '.close').subscribe((function(_this) {
        return function() {
          _this.event('dispose').raise(_this);
          return false;
        };
      })(this));
    }

    Tile.prototype.event = function(name) {
      return this.events.get(name);
    };

    return Tile;

  })();
  TileList = (function(superClass) {
    extend(TileList, superClass);

    function TileList() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      TileList.__super__.constructor.apply(this, arguments);
      this.events.add('ready');
      this.events.add('new', EventType.disjoin(this.event('add')));
      this.event('insert');
      this.event('new').subscribe((function(_this) {
        return function(tile) {
          return tile.event('ready').subscribe(function(tile) {
            return _this.event('ready').raise(tile);
          });
        };
      })(this));
      this.event('dispose').subscribe((function(_this) {
        return function(tile) {
          return _this.remove(tile);
        };
      })(this));
    }

    return TileList;

  })(Observable(List.Of(Tile)));
  return {
    Tile: Tile,
    TileList: TileList
  };
});

//# sourceMappingURL=jview2.js.map
