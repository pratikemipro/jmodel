// Generated by CoffeeScript 1.7.1
var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

define(function(require) {
  var $, Source, Target, jm;
  $ = require('jquery');
  jm = require('jmodel/emerald');
  require('jmodel-plugins/jquery.emerald');
  Source = (function() {
    function Source(element, extractors) {
      this.element = $(element);
      this.extractors = new jm.List.fromArray(extractors);
      this.element.find('*').attr('draggable', false);
      this.element.attr('draggable', true).event('dragstart').subscribe((function(_this) {
        return function(_arg) {
          var dataTransfer, target, _ref;
          (_ref = _arg.originalEvent, dataTransfer = _ref.dataTransfer), target = _arg.target;
          dataTransfer.dropEffect = 'none';
          return _this.extractors.each(function(extractor) {
            var data, type, _ref1;
            _ref1 = extractor($(target)), type = _ref1[0], data = _ref1[1];
            return dataTransfer.setData(type, (/json/.test(type) ? JSON.stringify(data) : data));
          });
        };
      })(this));
    }

    return Source;

  })();
  Target = (function() {
    function Target(_arg) {
      var element, types;
      element = _arg.element, types = _arg.types, this.effect = _arg.effect;
      this.element = $(element);
      this.types = new jm.List.fromArray(types);
      this.events = new jm.EventRegistry('drop');
      jm.disjoin(this.element.event('dragenter', {
        preventDefault: true
      }).where((function(_this) {
        return function(_arg1) {
          var dataTransfer;
          dataTransfer = _arg1.originalEvent.dataTransfer;
          return _this.accept(dataTransfer);
        };
      })(this)).map(function() {
        return 1;
      }), this.element.event('dragleave', {
        preventDefault: true
      }).where((function(_this) {
        return function(_arg1) {
          var dataTransfer;
          dataTransfer = _arg1.originalEvent.dataTransfer;
          return _this.accept(dataTransfer);
        };
      })(this)).map(function() {
        return -1;
      }), this.element.event('drop', {
        preventDefault: true
      }).map(function() {
        return 1;
      })).accumulate(jm.plus, 0).subscribe((function(_this) {
        return function(count) {
          return _this.element.toggleClass('over', count > 0);
        };
      })(this));
      this.element.event('dragover', {
        preventDefault: true
      }).map(function(_arg1) {
        var dataTransfer;
        dataTransfer = _arg1.originalEvent.dataTransfer;
        return dataTransfer;
      }).where((function(_this) {
        return function(transfer) {
          return _this.accept(transfer);
        };
      })(this)).subscribe((function(_this) {
        return function(transfer) {
          transfer.dropEffect = _this.effect;
          return false;
        };
      })(this));
      this.element.event('drop', {
        stopPropagation: true
      }).map(function(_arg1) {
        var dataTransfer;
        dataTransfer = _arg1.originalEvent.dataTransfer;
        return dataTransfer;
      }).subscribe((function(_this) {
        return function(transfer) {
          _this.element.removeClass('over');
          _this.types.each(function(type) {
            var datum;
            datum = transfer.getData(type);
            if (datum !== '') {
              return _this.event('drop').raise((/json/.test(type) ? JSON.parse(datum) : datum), type);
            }
          });
          return false;
        };
      })(this));
    }

    Target.prototype.event = function(name) {
      return this.events.get(name);
    };

    Target.prototype.accept = function(transfer) {
      return this.types.exists(function(type) {
        return __indexOf.call(transfer.types, type) >= 0;
      });
    };

    return Target;

  })();
  return {
    Source: Source,
    Target: Target
  };
});

//# sourceMappingURL=drag.map
