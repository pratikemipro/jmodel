<?xml version="1.0"?>

<module>

	<name>Function</name>

	<functions>
	
		<name>Elementary Functions</name>
	
		<function>
			<object>Function</object>
			<name>.identity</name>
			<arguments>
				<argument>a</argument>
			</arguments>
			<return>value</return>
			<description>
				<p><code>Function.identity</code> returns its argument.</p>
			</description>
			<examples>
				<example>
					<input>Function.identity 'test'</input>
					<output>"test"</output>
				</example>
			</examples>
		</function>
		
		<function>
			<object>Function</object>
			<name>.constant</name>
			<arguments>
				<argument>a</argument>
			</arguments>
			<return>function</return>
			<description>
				<p><code>Function.constant(a)</code> is a function that always returns <code>a</code>.</p>
			</description>
			<examples>
				<example>
					<input>test = Function.constant 'test'</input>
				</example>
                <example>
                    <input>test 5</input>
				    <output>"test"</output>
				</example>
				<example>
				    <input>test 'fred'</input>
				    <output>"test"</output>
				</example>
			</examples>
		</function>
		
		<function>
			<object>Function</object>
			<name>.arguments</name>
			<arguments unbounded="true">
				<argument>a</argument>
				<argument>b</argument>
				<argument>c</argument>
			</arguments>
			<return>Array</return>
		</function>
		
		<function>
			<object>Function</object>
			<name>.argument</name>
			<arguments unbounded="true">
				<argument>a</argument>
				<argument>b</argument>
				<argument>c</argument>
			</arguments>
			<return>function</return>
		</function>
		
		<function>
			<object>Function</object>
			<name>.map</name>
			<arguments>
				<argument>mapping</argument>
			</arguments>
			<return>function</return>
		</function>
	
	</functions>
	
	<functions>
	
		<name>Function composition</name>
		
		<function>
			<object>Function</object>
			<name>::then</name>
			<arguments>
				<argument>fn</argument>
			</arguments>
			<return>function</return>
		</function>
		
		<function>
			<object>Function</object>
			<name>::but</name>
			<arguments>
				<argument>fn</argument>
			</arguments>
			<return>function</return>
		</function>
		
		<function>
			<object>Function</object>
			<name>.pipe</name>
			<arguments unbounded="true">
		        <argument>fn1</argument>
		        <argument>fn2</argument>
		        <argument>fn3</argument>
			</arguments>
			<return>function</return>
			<description>
				<p><code>Function.pipe</code> composes functions as a pipeline in a “point-free” manner. Applying the pipelined function applies the leftmost function first so that <code>Function.pipe(fn1,fn2,fn3) x</code> is the same as <code>fn3 fn2 fn1 x</code>.</p>
			</description>
		</function>
		
		<function>
			<object>Function</object>
			<name>.compose</name>
			<arguments unbounded="true">
		        <argument>fn1</argument>
		        <argument>fn2</argument>
		        <argument>fn3</argument>
			</arguments>
			<return>function</return>
			<description>
				<p><code>Function.compose</code> performs “point-free” function composition in the traditional order. When the composition is applied, the rightmost function is applied first so that <code>Function.compose(fn1,fn2,fn3) x</code> is the same as <code>fn1 fn2 fn3 x</code>.</p>
			</description>
		</function>
	
	</functions>
	
</module>