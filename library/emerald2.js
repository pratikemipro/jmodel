// Generated by CoffeeScript 1.9.1

/*
		Emerald JavaScript Library
		http://code.google.com/p/jmodel/

		Copyright (c) 2009-2013 Richard Baker
		Dual licensed under the MIT and GPL licenses
 */
var slice = [].slice,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(['jmodel/sapphire2'], function() {
  var Character, EventRegistry, EventType, SpecialKey, Subscriber, codes;
  codes = {
    ':backspace': 8,
    ':tab': 9,
    ':return': 13,
    ':shift': 16,
    ':ctrl': 17,
    ':alt': 18,
    ':escape': 27,
    ':left': 37,
    ':up': 38,
    ':right': 39,
    ':down': 40,
    ':delete': 46,
    ':leftcmd': 91,
    ':rightcmd': 93
  };
  Character = String.Where(function() {
    return this.length === 1;
  });
  SpecialKey = String.Matching(/:.+/);
  Event.key = Function.overload([
    Function.From(Character)(function(key) {
      return function(arg) {
        var which;
        which = arg.which;
        return String.fromCharCode(which).toUpperCase() === key;
      };
    }), Function.From(RegExp)(function(regex) {
      return function(arg) {
        var which;
        which = arg.which;
        return String.fromCharCode(which).toUpperCase().match(regex) || false;
      };
    }), Function.From(Number)(function(number) {
      return function(arg) {
        var which;
        which = arg.which;
        return which === number;
      };
    }), Function.From(SpecialKey)(function(identifier) {
      return Event.key(codes[identifier]);
    }), Function.From(Value, [Value])(function() {
      var identifer, identifiers;
      identifer = arguments[0], identifiers = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      return Event.key(identifier).or(Event.key.apply(Event, identifiers));
    })
  ]);
  window.Subscriber = Subscriber = (function() {
    var class1;

    function Subscriber() {
      return class1.apply(this, arguments);
    }

    class1 = Function.From(Maybe(Function, Maybe(Function)))(function(notify1, fail1) {
      this.notify = notify1;
      this.fail = fail1;
    });

    return Subscriber;

  })();
  window.EventType = EventType = (function(superClass) {
    extend(EventType, superClass);

    function EventType() {
      EventType.__super__.constructor.call(this);
      this.subscribers = new (Set.Of(Subscriber));
      this.each((function(_this) {
        return function(promise) {
          return _this.subscribers.each(function(arg) {
            var fail, notify;
            notify = arg.notify, fail = arg.fail;
            return promise.then(notify, fail);
          });
        };
      })(this));
    }

    EventType.prototype.derive = Function.From(Function).Returning(function() {
      return new this.constructor();
    })(function(child) {
      return function(fn) {
        return this.each(function(promise) {
          return promise.then(fn.bind(child));
        });
      };
    });

    EventType.prototype.subscribe = Function.delegate(function() {
      return [this.subscribers, this.subscribers.add];
    });

    EventType.prototype.raise = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return this.add(JMPromise.Fulfilled.apply(JMPromise, args));
    };

    EventType.prototype.fail = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return this.add(JMPromise.Rejected.apply(JMPromise, args));
    };

    EventType.prototype.republish = function(eventtype) {
      return this.subscribe(Function.delegate(function() {
        return [eventtype, eventtype.raise];
      }, Function.delegate(function() {
        return [eventtype, eventtype.fail];
      })));
    };

    EventType.Of = Function.Cache.From(Function)(function(constructor) {
      var type;
      type = JMPromise.Of(constructor);
      return (function(superClass1) {
        extend(_Class, superClass1);

        function _Class() {
          return _Class.__super__.constructor.apply(this, arguments);
        }

        _Class.prototype.add = Function.Of(type)(_Class.prototype.add);

        _Class.prototype.raise = function() {
          var args;
          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          return this.add(type.Fulfilled.apply(type, args));
        };

        _Class.prototype.fail = function() {
          var args;
          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          return this.add(type.Rejected.apply(type, args));
        };

        return _Class;

      })(this);
    });

    return EventType;

  })(Stream.Of(JMPromise));
  return window.EventRegistry = EventRegistry = (function(superClass) {
    extend(EventRegistry, superClass);

    function EventRegistry(eventtypes) {
      if (eventtypes == null) {
        eventtypes = [];
      }
      EventRegistry.__super__.constructor.call(this, eventtypes);
    }

    EventRegistry.prototype.register = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return this.add.apply(this, args);
    };

    EventRegistry.prototype.create = Function.Returning(function() {
      return new EventType;
    })(function(eventtype) {
      return function(key) {
        return this.add(key, eventtype);
      };
    });

    EventRegistry.prototype.subscribe = Function.From(Object)(function(subscriptions) {
      var name, results, subscriber;
      results = [];
      for (name in subscriptions) {
        if (!hasProp.call(subscriptions, name)) continue;
        subscriber = subscriptions[name];
        results.push(this.get(name).subscribe(subscriber));
      }
      return results;
    });

    EventRegistry.prototype.republish = Function.From(Object)(function(publications) {
      var eventtype, name, results;
      results = [];
      for (name in publications) {
        if (!hasProp.call(publications, name)) continue;
        eventtype = publications[name];
        results.push(this.get(name).republished(eventtype));
      }
      return results;
    });

    return EventRegistry;

  })(Map.To(EventType));
});

//# sourceMappingURL=emerald2.js.map
