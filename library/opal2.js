// Generated by CoffeeScript 1.4.0
/*

	OPAL Javascript Library
	http://code.google.com/p/jmodel/
	
	Copyright (c) 2009-2012 Richard Baker
	Dual licensed under the MIT and GPL licenses
*/

var __slice = [].slice;

define(['cs!jmodel/opal.Function'], function() {
  'use strict';

  var assert, delegateTo, opal, type, _ref, _ref1;
  opal = {
    opal_version: '0.22.0'
  };
  assert = ((_ref = window.console) != null ? _ref.assert : void 0) != null ? function(condition, message) {
    return window.console.assert(condition, message);
  } : function(condition, message) {
    if (!condition) {
      throw "Opal exception: " + message;
    }
  };
  /*
  		Utility functions
  */

  if ((_ref1 = Object.extend) == null) {
    Object.extend = function(target, source) {
      var key, value;
      for (key in source) {
        value = source[key];
        target[key] = value;
      }
      return target;
    };
  }
  type = function(object) {
    return typeof object;
  };
  delegateTo = function(context, methodName) {
    return function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return context[methodName].apply(context, args);
    };
  };
  Object.extend(opal, {
    type: type,
    assert: assert,
    delegateTo: delegateTo
  });
  /*
  		Object
  */

  Object.extend(Object, {
    construct: function() {
      var args1, constructor;
      constructor = arguments[0], args1 = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (constructor === String) {
        return String;
      } else if (constructor === Number) {
        return Number;
      } else if (constructor === Boolean) {
        return Boolean;
      } else if (constructor.nullable != null) {
        return constructor;
      } else {
        return function() {
          var args2;
          args2 = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return (function(func, args, ctor) {
            ctor.prototype = func.prototype;
            var child = new ctor, result = func.apply(child, args);
            return Object(result) === result ? result : child;
          })(constructor, args1.concat(args2), function(){});
        };
      }
    },
    ensure: function(constructor, args1) {
      if (constructor === String) {
        return function(value) {
          if (typeof value !== 'string') {
            return String(value);
          }
        };
      } else if (constructor === Number) {
        return function(value) {
          if (typeof value !== 'number') {
            return Number(value);
          }
        };
      } else if (constructor === Boolean) {
        return function(value) {
          if (typeof value !== 'boolean') {
            return Boolean(value);
          }
        };
      } else if (constructor.nullable != null) {
        return function() {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          if (args.length === 1 && (args[0] === null || args[0] === void 0)) {
            return null;
          } else {
            return (function(func, args, ctor) {
              ctor.prototype = func.prototype;
              var child = new ctor, result = func.apply(child, args);
              return Object(result) === result ? result : child;
            })(constructor, args1.concat(args2), function(){});
          }
        };
      } else {
        return function() {
          var args2;
          args2 = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          if (!(object instanceof constructor)) {
            return (function(func, args, ctor) {
              ctor.prototype = func.prototype;
              var child = new ctor, result = func.apply(child, args);
              return Object(result) === result ? result : child;
            })(constructor, args1.concat(args2), function(){});
          }
        };
      }
    }
  });
  opal.eq = function(n) {
    return function(x) {
      return n === x;
    };
  };
  return opal;
});
