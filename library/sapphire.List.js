// Generated by CoffeeScript 1.4.0
var __slice = [].slice,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(function() {
  var List;
  return window.List = List = (function() {

    function List(elements) {
      var element, _i, _len;
      if (elements == null) {
        elements = [];
      }
      if (!(elements instanceof Array)) {
        elements = [elements];
      }
      for (_i = 0, _len = elements.length; _i < _len; _i++) {
        element = elements[_i];
        this.add(element);
      }
    }

    List.prototype.add = function(element) {
      Array.prototype.push.call(this, element);
      return this;
    };

    List.prototype.member = function(element) {
      return -1 !== Array.prototype.indexOf.call(this, element);
    };

    List.concat = function() {
      var base, other, others;
      base = arguments[0], others = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return new base.constructor(Array.prototype.concat.apply(Array.prototype.slice.call(base), (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = others.length; _i < _len; _i++) {
          other = others[_i];
          _results.push(Array.prototype.slice.call(other));
        }
        return _results;
      })()));
    };

    List.Of = function(cons) {
      return (function(_super) {

        __extends(_Class, _super);

        function _Class() {
          return _Class.__super__.constructor.apply(this, arguments);
        }

        _Class.prototype.add = function(element) {
          return _Class.__super__.add.call(this, this.ensure(element));
        };

        _Class.prototype.ensure = function(value) {
          if (value instanceof cons) {
            return value;
          } else {
            return new cons(value);
          }
        };

        return _Class;

      })(this);
    };

    return List;

  })();
});
