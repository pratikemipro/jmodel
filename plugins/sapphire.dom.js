// Generated by CoffeeScript 1.9.1
var hasProp = {}.hasOwnProperty;

define(function(require) {
  var context, ensureElement, getAttributes, query;
  require('jmodel/sapphire2');
  Element.create = Function.From(String)(function(html) {
    var element;
    element = Object.execute(function() {
      return this.innerHTML = html;
    })(document.createElement('div')).childNodes[0];
    return element;
  });
  ensureElement = function(element) {
    if (element instanceof Element) {
      return element;
    } else {
      return Element.create(element);
    }
  };
  Set.Of(Element).prototype.add = function(element) {
    return Set.prototype.add.call(this, ensureElement(element));
  };
  List.Of(Element).prototype.add = function(element) {
    return List.prototype.add.call(this, ensureElement(element));
  };
  query = function(selector) {
    var ancestor, ancestors, child, i, j, k, len, len1, len2, parent, ref, ref1, results, results1, results2;
    switch (false) {
      case selector.charAt(0) !== '>':
        ref = this.children;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          child = ref[i];
          if (child.matches(selector.slice(2))) {
            results.push(child);
          }
        }
        return results;
      case selector.substring(0, 2) !== '<<':
        ancestors = (function(parent) {
          var results1;
          results1 = [];
          while (parent.parentNode != null) {
            results1.push(parent = parent.parentNode);
          }
          return results1;
        })(this);
        results1 = [];
        for (j = 0, len1 = ancestors.length; j < len1; j++) {
          ancestor = ancestors[j];
          if (typeof ancestor.matches === "function" ? ancestor.matches(selector.slice(3)) : void 0) {
            results1.push(ancestor);
          }
        }
        return results1;
      case selector.charAt(0) !== '<':
        ref1 = [this.parentNode];
        results2 = [];
        for (k = 0, len2 = ref1.length; k < len2; k++) {
          parent = ref1[k];
          if (parent.matches(selector.slice(2))) {
            results2.push(parent);
          }
        }
        return results2;
      default:
        return this.querySelectorAll(selector);
    }
  };
  Document.prototype.find = Element.prototype.find = Function.From(String)(function(selector) {
    return new (Set.Of(Element))(query.call(this, selector));
  });
  Set.Of(Element).fromSelector = List.Of(Element).fromSelector = Function.From(String)(function(selector) {
    return document.find(selector);
  });
  Set.Of(Element).prototype.find = List.Of(Element).prototype.find = Function.From(String)(function(selector) {
    return new this.constructor(this.mapAll(function() {
      return query.call(this, selector);
    }));
  });
  context = function(property) {
    return Function.overload([
      Function.From()(function() {
        return this.to(List).map(function() {
          return this[property];
        });
      }), Function.From(String)(function(name) {
        return this.to(List).map(function() {
          return this[property][name];
        });
      }), Function.From(Function)(function(fn) {
        return this.each(function() {
          return Object.execute(fn)(this[property]);
        });
      })
    ]);
  };
  Set.Of(Element).prototype.style = List.Of(Element).prototype.style = context('style').extend([
    Function.From()(function() {
      return this.to(List).map(function() {
        return window.getComputedStyle(this);
      });
    }), Function.From(String)(function(name) {
      return this.style().map(function() {
        return this[name];
      });
    })
  ]);
  Set.Of(Element).prototype.dataset = List.Of(Element).prototype.dataset = context('dataset');
  Set.Of(Element).prototype.classes = List.Of(Element).prototype.classes = context('classList').extend([
    Function.From(String)(function(name) {
      return this.classes().map(function() {
        return this.contains(name);
      });
    })
  ]);
  getAttributes = Function.Returning(function() {
    return {};
  })(function(attributes) {
    return function() {
      var attr, i, len, ref, results;
      ref = this.attributes;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        attr = ref[i];
        results.push(attributes[attr.name] = attr.value);
      }
      return results;
    };
  });
  return Set.Of(Element).prototype.attributes = List.Of(Element).prototype.attributes = Function.overload([
    Function.From()(function() {
      return this.to(List).map(getAttributes);
    }), Function.From(String)(function(name) {
      return this.attributes().map(function() {
        return this[name];
      });
    }), Function.From(Function)(function(fn) {
      return this.each(function() {
        var name, ref, results, value;
        ref = Object.execute(fn)(getAttributes.call(this));
        results = [];
        for (name in ref) {
          if (!hasProp.call(ref, name)) continue;
          value = ref[name];
          if ((value != null) && value) {
            results.push(this.setAttribute(name, value));
          } else {
            results.push(this.removeAttribute(name));
          }
        }
        return results;
      });
    })
  ]);
});

//# sourceMappingURL=sapphire.dom.js.map
